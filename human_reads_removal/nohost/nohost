#!/usr/bin/env perl

use 5.012;
use Getopt::Long;
use FindBin qw($RealBin);
use Term::ANSIColor qw(:constants);
my $NAME     = 'HumanScreen';
my $VERSION  = '1.03';

my $DB;
if (-d "$RealBin/hg") {
 $DB = "$RealBin";
} elsif (-d "$RealBin/../../../hg/" {
 $DB = "$RealBin/../../../";
} else {
 die "** ERROR**\n Database not installed.\n"
}
my ($opt_R1, $opt_R2, $opt_outbase, $opt_skipqual, $opt_debug);
my $opt_threads    = 1;
my $opt_minlen     = 50;
my $opt_mem_mb     = 24000;
my $opt_minid      = 0.95;
my $opt_reference  = "$DB/hg19_main_mask_ribo_animal_allplant_allfungus.fa";
my $opt_trimfront1 = 0;
my $opt_trimfront2 = 0;
my $opt_minqual    = 20;

my $_opt = GetOptions(
  '1|first-pair=s'     => \$opt_R1,
  '2|second-pair=s'    => \$opt_R2,
  'r|reference=s'      => \$opt_reference,
  't|threads=i'        => \$opt_threads,
  'm|minlen=i'         => \$opt_minlen,
  'i|minid=f'          => \$opt_minid,
  'q|minqual=f'        => \$opt_minqual,
  'o|outbase=s'        => \$opt_outbase,
  's|skipqual'         => \$opt_skipqual,
  'mem=i'              => \$opt_mem_mb,
  'd|debug'            => \$opt_debug,
);

usage() if ((not defined $opt_R1) or (not defined $opt_outbase));

my @tmp_files = ();
my $bbmap_common = qq(minid=0.95 maxindel=3 bwr=0.16 bw=12 quickmatch fast minhits=2 threads=$opt_threads pigz unpigz);
my $bbduk_common = qq(); 

if (not -e "$opt_R1") {
}

if (defined $opt_R2 and not -e "$opt_R2") {
  die "FATAL ERROR: Second input file not found: $opt_R2";
}

# QUALITY Check
# =================
if (not defined $opt_skipqual) {
  say STDERR YELLOW, " * FASTQ quality", RESET if ($opt_debug);
  my $fastp_cmd = qq(fastp -w $opt_threads --in1 "$opt_R1" --out1 "$opt_outbase.R1.filt.fq.gz"  ) .
                  qq(--length_required $opt_minlen --qualified_quality_phred $opt_minqual ) .
                  qq(--trim_front1 $opt_trimfront1  --json "$opt_outbase.json" --html /dev/null );

  if (-e "$RealBin/adapters.fa") {
     $fastp_cmd .= qq( --adapter_fasta "$RealBin/adapters.fa" );
  }

  if (defined $opt_R2) {
	$fastp_cmd .= qq(--in2 "$opt_R2" --out2 "$opt_outbase.R2.filt.fq.gz"  --trim_front2 $opt_trimfront2);
  }
  execute($fastp_cmd);

  die "FATAL ERROR:\nOutput of fastp is empty: <$opt_outbase.R1.filt.fq.gz>\n" 
      if (not -s "$opt_outbase.R1.filt.fq.gz");

  $opt_R1 = "$opt_outbase.R1.filt.fq.gz";
  $opt_R2 = "$opt_outbase.R2.filt.fq.gz";

}  

push(@tmp_files, "$opt_outbase.R1.filt.fq.gz", "$opt_outbase.R2.filt.fq.gz");


# Mapping
# ===================

#minratio=0.9 maxindel=3 bwr=0.16 bw=12 quickmatch fast minhits=2 path=/global/projectb/sandbox/gaag/bbtools/hg19 pigz unpigz zl=6 qtrim=r trimq=10 untrim 
#idtag usemodulo printunmappedcount ztd=2 kfilter=25 maxsites=1 k=14 bloomfilter $@

# out=unmatched.fq outm=matched.fq ref=phix.fa k=31 hdist=1 
my $phix_cmd  = qq(bbduk.sh threads=$opt_threads in="$opt_R1" k=31 hdist=1 hdist2=1 ) . 
		qq( out="$opt_outbase.phi.R1.fq.gz" path="$DB/phi/" );

my $bbmap_cmd = qq(bbmap.sh path="$DB/hg/" in="$opt_outbase.phi.R2.fq.gz") .
                qq( $bbmap_common  ) .
                qq(outu="${opt_outbase}_R1.fq.gz"  -Xmx${opt_mem_mb}m );


push(@tmp_files, "${opt_outbase}_R1.fq.gz", "${opt_outbase}_R2.fq.gz");
if (defined $opt_R2) {
  say STDERR YELLOW, " * Paired-end", RESET if ($opt_debug);
  $phix_cmd  = qq(bbduk.sh threads=$opt_threads in1="$opt_R1" in2="$opt_R2" k=31 hdist=1 hdist2=1 ) .
		  qq(out1="$opt_outbase.phi.R1.fq.gz" out2="$opt_outbase.phi.R2.fq.gz" path="$DB/phi/" );

  $bbmap_cmd = qq(bbmap.sh path="$DB/hg/" in="$opt_R1" in2="$opt_outbase.phi.R2.fq.gz"  ).
                qq(outu1="${opt_outbase}_R1.fq.gz" outu2="${opt_outbase}_R2.fq.gz" ).  
		qq($bbmap_common  -Xmx${opt_mem_mb}m );
} else {
  say STDERR YELLOW, " * Paired-end", RESET if ($opt_debug);
}


execute($phix_cmd);
execute($bbmap_cmd);

for my $file (@tmp_files) {
	if (-e "$file") {
		execute( qq(rm "$file") );
	}
}

sub usage {
 
 say STDERR " $NAME, ver. $VERSION";
 say STDERR ' ', '-' x 60;
 say STDERR "* -1, --first-pair  FILE  (first in pair R1 file)";
 say STDERR "  -2, --second-pair FILE  (second in pair R2 file)";
 say STDERR "* -o, --outbase     FILE  (basename of the output files)";
 say STDERR "  -t, --threads     INT   (number of threads)";
 say STDERR "  -s, --skipqual          (skip quality pre-filtering [fastp])";
 say STDERR "  -m, --minlen      INT   (minimum length of reads)";
 say STDERR "  -q, --minqual     DEC   (minimum qualified quality)";
 say STDERR ' ', '-' x 60;
 exit;
}

sub execute {
  my ($command, $title, $can_fail) = @_;
  say GREEN "> $command", RESET if ($opt_debug);
  my $out = `$command`;
  if ($?) {
    print STDERR RED, " ****** ", RESET, "\n";
    die " FATAL ERROR: Execution of\n> $command\n\nreturned $?\n";
  }
  return $out;

}

__END__
#!/bin/bash
THREADS=1
BUILD=2
DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null && pwd )"
 
echo "HumanScreen V1.$BUILD

 USAGE:
$(basename $0) [options] -1 file_R1.fq [-2 file_R2.fq] -o output_basename

  -t INT     Threads [$THREADS]
";


while getopts t:1:2:o: option
do
        case "${option}"
                in
                        t) THREADS=${OPTARG};;
			1) R1=${OPTARG};;
			2) R2=${OPTARG};;
			o) OUT=${OPTARG};;
                        ?) echo " Wrong parameter $OPTARG";;
         esac
done
shift "$(($OPTIND -1))"

MODE='PE'

# REQUIRED PARAMETERS
if [ -z ${R1+x} ]; 
then
    echo "Missing parameter: -1 File_R1.fq.gz";
    exit 1;
fi

if [ -z ${OUT+x} ]; 
then
    echo "Missing parameter: -o Output_Basename";
    exit 1;
fi

if [ -z ${R2+x} ]; 
then
    MODE='SE'
fi

echo "Removing human reads from $R1/$R2 to $OUT: $MODE"

if [ $MODE == "SE" ]; then
	# Check input
	if [ ! -e "$R1" ]; then
		echo "ERROR: File not found $R1"
		exit 1;
	fi
	if [ ! -e "$R2" ]; then
		echo "ERROR: File not found $R2"
		exit 1;
	fi
	set -x
	bbmap.sh overwrite=f ref="$DIR/hg19_main_mask_ribo_animal_allplant_allfungus.fa" path="$DIR" \
		in="$R1" outu="${OUT}_R1.fq.gz" \
		pigz=t unpigz=t threads=$THREADS minid=0.88 -Xmx24000m
elif [ $MODE == "PE" ]; then
	set -x
	bbmap.sh overwrite=f ref="$DIR/hg19_main_mask_ribo_animal_allplant_allfungus.fa" path="$DIR" \
		in="$R1" in2="$R2" outu="${OUT}_R1.fq.gz" outu2="${OUT}_R2.fq.gz" \
		pigz=t unpigz=t threads=$THREADS minid=0.88 -Xmx24000m
fi
